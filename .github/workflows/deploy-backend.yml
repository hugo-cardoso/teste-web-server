name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build:
    name: Build da Imagem
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web-server-backend:latest

  deploy:
    name: Deploy na EC2
    needs: build
    runs-on: ubuntu-latest
    env:
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_IP: ${{ secrets.EC2_IP }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Limpar diretório remoto
        run: |
          ssh -i ec2-key.pem $EC2_USER@$EC2_IP "rm -rf ~/backend/*"

      - name: Copiar docker-compose para EC2
        run: |
          rsync -avz -e "ssh -i ec2-key.pem" \
            ./backend/docker-compose.yml $EC2_USER@$EC2_IP:~/backend/

      - name: Executar deploy no EC2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh -i ec2-key.pem $EC2_USER@$EC2_IP "export DOCKERHUB_USERNAME='${DOCKERHUB_USERNAME}' && export DOCKERHUB_TOKEN='${DOCKERHUB_TOKEN}' && bash -s" << 'ENDSSH'
            cd ~/backend
            
            # Fazer login no Docker Hub
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            
            # Parar containers existentes e puxar nova imagem
            docker compose down
            docker compose pull
            docker compose up -d
            
            # Mostrar status dos containers
            docker compose ps
            
            echo "Deploy concluído!"
          ENDSSH
